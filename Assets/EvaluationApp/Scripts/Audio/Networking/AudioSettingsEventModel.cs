using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class AudioSettingsEventModel
{
    [RealtimeProperty(3, true, true)] private int _speakerID;
    [RealtimeProperty(4, true, true)] private int _useRealSpeaker;
  
}
/* ----- End Normal Autogenerated Code ----- */

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AudioSettingsEventModel : RealtimeModel {
    public int speakerID {
        get {
            return _speakerIDProperty.value;
        }
        set {
            if (_speakerIDProperty.value == value) return;
            _speakerIDProperty.value = value;
            InvalidateReliableLength();
            FireSpeakerIDDidChange(value);
        }
    }
    
    public int useRealSpeaker {
        get {
            return _useRealSpeakerProperty.value;
        }
        set {
            if (_useRealSpeakerProperty.value == value) return;
            _useRealSpeakerProperty.value = value;
            InvalidateReliableLength();
            FireUseRealSpeakerDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(AudioSettingsEventModel model, T value);
    public event PropertyChangedHandler<int> speakerIDDidChange;
    public event PropertyChangedHandler<int> useRealSpeakerDidChange;
    
    public enum PropertyID : uint {
        SpeakerID = 3,
        UseRealSpeaker = 4,
    }
    
    #region Properties
    
    private ReliableProperty<int> _speakerIDProperty;
    
    private ReliableProperty<int> _useRealSpeakerProperty;
    
    #endregion
    
    public AudioSettingsEventModel() : base(null) {
        _speakerIDProperty = new ReliableProperty<int>(3, _speakerID);
        _useRealSpeakerProperty = new ReliableProperty<int>(4, _useRealSpeaker);
        
        SubscribeEventCallback(Normal.Realtime.RealtimeModelEvent.OnDidRead, DidRead);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _speakerIDProperty.UnsubscribeCallback();
        _useRealSpeakerProperty.UnsubscribeCallback();
    }
    
    private void FireSpeakerIDDidChange(int value) {
        try {
            speakerIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireUseRealSpeakerDidChange(int value) {
        try {
            useRealSpeakerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _speakerIDProperty.WriteLength(context);
        length += _useRealSpeakerProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _speakerIDProperty.Write(stream, context);
        writes |= _useRealSpeakerProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.SpeakerID: {
                    changed = _speakerIDProperty.Read(stream, context);
                    if (changed) FireSpeakerIDDidChange(speakerID);
                    break;
                }
                case (uint) PropertyID.UseRealSpeaker: {
                    changed = _useRealSpeakerProperty.Read(stream, context);
                    if (changed) FireUseRealSpeakerDidChange(useRealSpeaker);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _speakerID = speakerID;
        _useRealSpeaker = useRealSpeaker;
    }


public void FireEvent(int speakerID, int useRealSpeaker) {
        this.speakerID = speakerID;
        this.useRealSpeaker = useRealSpeaker;
    }

    // An event that consumers of this model can subscribe to in order to respond to the event
    public delegate void EventHandler(int speakerID, int useRealSpeaker);
    public event EventHandler eventDidFire;

    // A RealtimeCallback method that fires whenever we read any values from the server
    [RealtimeCallback(RealtimeModelEvent.OnDidRead)]
    private void DidRead() {
        if (eventDidFire != null)
            eventDidFire(speakerID, useRealSpeaker);
            Debug.Log("real "+useRealSpeaker);
    }      
}
/* ----- End Normal Autogenerated Code ----- */
